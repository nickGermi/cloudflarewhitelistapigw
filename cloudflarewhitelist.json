{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creats a Lambda function to whitelist cloudflare",
    "Parameters": {
        "APIID": {
            "Type": "String",
            "Description": "API ID to be whitelisted"
        }
    },
    "Resources": {
        "iamPolicy": {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "apigateway:*",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "iamRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                        "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Description": "Service role for Cloudflarelambda",
                "ManagedPolicyArns" : [ {"Ref": "iamPolicy"} ],
                "MaxSessionDuration" : "3600"
            },
            "DependsOn" : ["iamPolicy"]
        },
        "lambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Node Function Handler",
                "Handler": "index.handler",
                "Runtime": "nodejs10.x",
                "Role": {
                    "Fn::GetAtt": [
                        "iamRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "API_ID": {
                            "Ref": "APIID"
                        }
                    }
                },
                "Code": {
                    "ZipFile": "const http = require('https');
                    const AWS = require('aws-sdk');
                    const apiid = process.env.API_ID;
                    const policyTemplate = '{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"execute-api:Invoke\", \"Resource\": \"execute-api:/*/*/*\" }, { \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": \"execute-api:Invoke\", \"Resource\": \"execute-api:/*/*/*\", \"Condition\": { \"NotIpAddress\": { \"aws:SourceIp\": [] } } } ] }';
                    const ipv4regex = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/;
                    const ipv6regex = /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$/;
                    exports.handler = async (event) => {
                        const ipv4Promise = httprequest('ips-v4');
                        const ipv6Promise = httprequest('ips-v6');
                        const apigateway = new AWS.APIGateway();
                        
                        const ipsv4 = await ipv4Promise;
                        const ipsv6 = await ipv6Promise;
                        const api = await apigateway.getRestApi({restApiId: apiid}).promise();
                    
                        const ipv4 = ipsv4.split('\\n').filter(String);
                        const ipv6 = ipsv6.split('\\n').filter(String);
                        const allips = ipv4.concat(ipv6);
                        
                        var existingips, responseBody;
                        if(api.policy) {
                            var oldpolicy = api.policy.replace(/\\\\\"/g,'\"');
                            var existingips = JSON.parse(oldpolicy).Statement[1].Condition.NotIpAddress['aws:SourceIp'];
                        }
                        if(JSON.stringify(allips)!==JSON.stringify(existingips)) {
                            var validips = false;
                            allips.forEach(function(iprange){
                                if(ipv4regex.test(iprange) || ipv6regex.test(iprange)) validips = true;
                            });
                            if(validips) {
                                var ipObject = {
                                        \"NotIpAddress\": {
                                        \"aws:SourceIp\": allips
                                    }
                                };
                                var CloudflareIPList = JSON.parse(policyTemplate);
                                CloudflareIPList.Statement[1].Condition = ipObject;
                                var params = {
                                    restApiId: apiid,
                                    patchOperations: [
                                        {
                                            op: 'replace',
                                            path: '/policy',
                                            value: JSON.stringify(CloudflareIPList)
                                        }
                                    ]
                                };
                                var updateApi = await apigateway.updateRestApi(params).promise();
                                var deployApi = await apigateway.createDeployment({
                                    restApiId: apiid,
                                    stageName: 'Prod',
                                    description: 'Updated cloudflare IP address whitelisting'
                                }).promise();
                                console.log('Deployed API', deployApi);
                                responseBody = 'Deployment updated';
                            } else {
                                responseBody = 'New IP addresses could not be validated!';
                            }
                        } else {
                            responseBody = 'Whitelisted Cloudflare IP addresses are up-to-date';
                        }
                    
                        const response = {
                            statusCode: 200,
                            body: JSON.stringify(responseBody),
                        };
                        return response;
                    };
                    function httprequest(path) {
                         return new Promise((resolve, reject) => {
                            const options = {
                                host: 'www.cloudflare.com',
                                path: '/'+path,
                                port: 443,
                                method: 'GET'
                            };
                            const req = http.request(options, (res) => {
                                if (res.statusCode < 200 || res.statusCode >= 300) {
                                    return reject(new Error('statusCode=' + res.statusCode));
                                }
                                var body = [];
                                res.on('data', function(chunk) {
                                    body.push(chunk);
                                });
                                res.on('end', function() {
                                    try {
                                        body = Buffer.concat(body).toString();
                                    } catch(e) {
                                        reject(e);
                                    }
                                    resolve(body);
                                });
                            });
                            req.on('error', (e) => {
                              reject(e.message);
                            });
                           req.end();
                        });
                    }"
                }
            },
            "DependsOn" : ["iamPolicy"]
        },
        "SchedualedExecutionRule": {
            "Type" : "AWS::Events::Rule",
            "Properties" : {
                "Description" : "Self execute lambda based on a defined scheduale",
                "ScheduleExpression" : "rate(1 day)",
                "State" : "ENABLED",
                "Targets" : [
                    {
                        "Id": "CloudflareWhitelistSchedualedExecution",
                        "Arn": {
                            "Fn::GetAtt": [
                                "lambdaFunction",
                                "Arn"
                            ]
                        }
                    }
                ]
            },
            "DependsOn": ["lambdaFunction"]
        },
        "GrantInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "lambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "SchedualedExecutionRule",
                        "Arn"
                    ]
                }
            },
            "DependsOn": ["lambdaFunction", "SchedualedExecutionRule"]
        }
    }
}
